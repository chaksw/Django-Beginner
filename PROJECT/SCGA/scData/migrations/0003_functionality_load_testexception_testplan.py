# Generated by Django 4.2.2 on 2023-06-14 05:49

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('scData', '0002_remove_certification_porject_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Functionality',
            fields=[
                ('func', models.CharField(max_length=10, verbose_name='Function')),
                ('funcID', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('Project', models.ForeignKey(db_column='Project', on_delete=django.db.models.deletion.CASCADE, to='scData.project')),
            ],
        ),
        migrations.CreateModel(
            name='Load',
            fields=[
                ('load', models.CharField(max_length=50, verbose_name='Load')),
                ('loadID', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('Func', models.ForeignKey(db_column='Functionality', on_delete=django.db.models.deletion.CASCADE, to='scData.functionality')),
            ],
        ),
        migrations.CreateModel(
            name='TestException',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.CharField(max_length=50, verbose_name='Note')),
                ('module', models.CharField(max_length=50, verbose_name='Module')),
                ('function', models.CharField(max_length=50, verbose_name='Function')),
                ('line', models.CharField(max_length=100, verbose_name='Line')),
                ('reqTag', models.CharField(max_length=50, verbose_name='Requirement Tag')),
                ('analyst', models.CharField(max_length=50, verbose_name='Analyst')),
                ('ucClassification', models.CharField(choices=[('IT', 'Incomplete Test'), ('RCM', 'Requirement-Code Mismatch'), ('DeactCode', 'Deactivated Code'), ('DefenCode', 'Defensive Code'), ('TEL', 'Test Environment Limitation'), ('PAS', 'Previously Analyzed Software'), ('other', 'Other'), (' ', ' ')], default=' ', max_length=50, verbose_name='Class')),
                ('analysisSummary', models.CharField(max_length=50, verbose_name='Analysis Summary')),
                ('correctiveAction', models.CharField(default='', max_length=50, verbose_name='Corrective Action')),
                ('issue', models.CharField(choices=[('Y', 'Yes'), ('N', 'No'), (' ', ' ')], default='No corrective action required.', max_length=10, verbose_name='Issue')),
                ('applicable', models.CharField(choices=[('PAR', 'PAR'), ('CR', 'CR'), (' ', ' ')], default=' ', max_length=10, verbose_name='Applicable')),
            ],
        ),
        migrations.CreateModel(
            name='TestPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('process', models.CharField(max_length=50, verbose_name='Process')),
                ('fName', models.CharField(max_length=50, verbose_name='File Name')),
                ('func', models.CharField(max_length=50, verbose_name='Function')),
                ('analyst', models.CharField(max_length=50, verbose_name='Analyst')),
                ('site', models.CharField(max_length=50, verbose_name='Site')),
                ('startDate', models.DateTimeField(verbose_name='Start Date')),
                ('mcdcCoverage', models.DecimalField(decimal_places=2, max_digits=4, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)], verbose_name='MC/DC Coverage')),
                ('eventCoverage', models.DecimalField(decimal_places=2, max_digits=4, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)], verbose_name='Event Coverage')),
                ('analysisCoverage', models.DecimalField(decimal_places=2, max_digits=4, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)], verbose_name='Analysis Coverage')),
                ('totalScCoverage', models.DecimalField(decimal_places=2, max_digits=4, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)], verbose_name='Total SC Coverage')),
                ('branches', models.IntegerField(verbose_name='Branches')),
                ('events', models.IntegerField(verbose_name='Events')),
                ('note', models.CharField(max_length=50, verbose_name='Note')),
                ('coveredDecisions', models.IntegerField(verbose_name='Decisions')),
                ('coveredConditons', models.IntegerField(verbose_name='Conditions')),
                ('coveredCases', models.IntegerField(verbose_name='Cases')),
                ('coveredEvents', models.IntegerField(verbose_name='Events')),
                ('totalDecisions', models.IntegerField(verbose_name='Decisions')),
                ('totalConditions', models.IntegerField(verbose_name='Conditions')),
                ('totalCases', models.IntegerField(verbose_name='Cases')),
                ('totalEvents', models.IntegerField(verbose_name='Events')),
                ('overSight', models.CharField(choices=[('Y', 'Yes'), ('N', 'No'), (' ', ' ')], default=' ', max_length=1)),
                ('tech', models.CharField(max_length=50, verbose_name='Tech')),
                ('nonTech', models.CharField(max_length=50, verbose_name='Non-Tech')),
                ('processDefect', models.CharField(max_length=50, verbose_name='Process Defect')),
                ('swLoad', models.ForeignKey(db_column='Load', on_delete=django.db.models.deletion.CASCADE, to='scData.load')),
            ],
        ),
    ]
